@inject TodoClient Client

<div class="bg-slate-100 min-h-screen flex items-center justify-center">
    <div class="flex-1 mx-auto  container-sm md:container-md">
        <div class="w-full shadow sm:rounded-lg border border-slate-200 bg-white flex flex-col justify-center py-12 px-4 sm:px-6 lg:px-8">
            <EditForm class="space-y-6" Model="@this" OnValidSubmit="@Login">
                <DataAnnotationsValidator/>
                <div>
                    <label for="username" class="block text-sm font-medium text-gray-700">User name</label>
                    <ValidationMessage For="@(() => Username)"/>
                    <WideInputText id="username" @bind-Value="Username"/>
                </div>
                <div>
                    <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                    <WideInputText id="password" type="password" @bind-Value="Password"/>
                    <ValidationMessage For="@(() => Password)"/>
                </div>
                <div>
                    <Button ButtonType="Button.Type.Primary" type="submit">Login</Button>
                    <Button @onclick="@Create">Create User</Button>
                </div>
            </EditForm>

            @if (!string.IsNullOrEmpty(alertMessage))
            {
                <div>@alertMessage</div>
            }
        </div>
    </div>
</div>

@code {
    string? alertMessage;

    [Required, StringLength(15)]
    public string? Username { get; set; }

    [Required, StringLength(32, MinimumLength = 6)]
    public string? Password { get; set; }

    [Parameter]
    public EventCallback<string> OnLoggedIn { get; set; }

    async Task Login()
    {
        alertMessage = null;
        if (await Client.LoginAsync(Username, Password))
        {
            await OnLoggedIn.InvokeAsync(Username);
        }
        else
        {
            alertMessage = "Login failed";
        }
    }

    async Task Create()
    {
        alertMessage = null;
        if (await Client.CreateUserAsync(Username, Password))
        {
            await OnLoggedIn.InvokeAsync(Username);
        }
        else
        {
            alertMessage = "Failed to create user";
        }
    }

}