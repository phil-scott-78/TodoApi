@inject TodoClient Client

@if (todos is null)
{
    <div>
        <div class="spinner-border" role="status"></div>
    </div>
}
else
{
    <div class="min-h-full dark:bg-slate-800 dark:text-slate-50">
        <div class="mx-auto container md:container-md pt-4 px-1 md:px-0 ">
            <EditForm @ref="@form" Model="@this" OnValidSubmit="@AddTodo">
                <DataAnnotationsValidator />
                <div>
                    <WideInputText autofocus @bind-Value="@NewTodo" placeholder="Type a new todo item" />
                    <ValidationMessage For="@(() => NewTodo)" />
                </div>
            </EditForm>

            <ul class="mt-4 divide-y divide-slate-100">
                @foreach (var todo in todos)
                {
                    <li @key="@todo.Id" class="flex flex-row py-1 md:py-2">
                        <input class="flex-initial mr-1" type="checkbox" value="" aria-label="..." />
                        <div class="flex-1">
                            @todo.Title
                        </div>
                        <div class="flex-initial">
                            <a class="text-slate-400 cursor-pointer" data-mdb-toggle="tooltip" title="Remove item" @onclick="@(() => DeleteTodo(todo))">🗙</a>
                        </div>
                    </li>
                }
            </ul>
        
        </div>
    </div>
    }

@code {
    TodoItem[]? todos;
    EditForm? form;

    [Required, StringLength(20)] public string? NewTodo { get; set; }

    [Parameter] public EventCallback OnForbidden { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTodos();
    }

    async Task LoadTodos()
    {
        (var statusCode, todos) = await Client.GetTodosAsync();

        if (statusCode == HttpStatusCode.Forbidden)
        {
            await OnForbidden.InvokeAsync();
        }
    }

    async Task AddTodo()
    {
        if (await Client.AddTodoAsync(NewTodo))
        {
            NewTodo = null;
            form!.EditContext!.MarkAsUnmodified();
            await LoadTodos(); // Would be nice if the backend returned the inserted data so we could append it locally without reloading everything
        }
    }

    async Task DeleteTodo(TodoItem todo)
    {
        if (await Client.DeleteTodoAsync(todo.Id))
        {
            todos = todos!.Except(new[] { todo }).ToArray();
        }
    }
}
